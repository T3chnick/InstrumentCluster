const unsigned char cruise [] PROGMEM = {
	// 'cruise, 36x42px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x03, 
	0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xf0, 
	0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x7e, 0x67, 0xe0, 0x00, 0x01, 0xf0, 0x60, 0xf8, 
	0x00, 0x03, 0xc0, 0x60, 0x3c, 0x00, 0x07, 0x00, 0x60, 0x0e, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 
	0x1f, 0x80, 0x00, 0x1f, 0x80, 0x19, 0xc6, 0x00, 0x3d, 0x80, 0x39, 0x87, 0x00, 0x19, 0xc0, 0x30, 
	0x03, 0x00, 0x00, 0xc0, 0x60, 0x03, 0x00, 0x00, 0x60, 0x60, 0x01, 0x80, 0x00, 0x60, 0x60, 0x01, 
	0x80, 0x00, 0x70, 0xc0, 0x01, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0xc0, 0x00, 0x30, 0xc0, 0x00, 0xe0, 
	0x00, 0x30, 0xe8, 0x00, 0xf0, 0x01, 0x70, 0xfc, 0x00, 0xf0, 0x01, 0xf0, 0xf8, 0x00, 0xf0, 0x01, 
	0xf0, 0xc0, 0x00, 0x60, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x70, 
	0x60, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0xe0, 0x30, 
	0x00, 0x00, 0x00, 0xc0, 0x39, 0x80, 0x00, 0x19, 0xc0, 0x1d, 0xc0, 0x00, 0x3b, 0x80, 0x0f, 0x80, 
	0x00, 0x1f, 0x00, 0x07, 0x00, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00
};

void UpdDisplays() { if(!DisplayST) {initDisplays();}
  if (millis()-lDispTimer > 10) { lDispUpd(); lDispTimer=millis(); }
  if (millis()-rDispTimer > 500) { rDispUpd(); rDispTimer=millis(); }


}

void lDispUpd(){ 
  dl.clearDisplay();
  dl.setCursor(0,39);
  dl.setFont(&FreeSans18pt7b);
  odometr = odometrPulses/24000;
  trip = (odometrPulses - tripreset)/24000.0;
  DispPage = constrain(DispPage,0,7);
  switch (DispPage){
    case 0: {  dl.print(th); dl.setFont(); dl.setCursor(110,13); dl.println("th"); break; }
    case 1: {  dl.print(sp); dl.setFont(); dl.setCursor(110,13); dl.println("sp"); break; }
    case 2: {  dl.print(trip,1); dl.setFont(); dl.setCursor(110,13); dl.println("tr");break; }
    case 3: {  dl.print(odometr); dl.setFont(); dl.setCursor(110,13); dl.println("od");break; }
    case 4: {  dl.print(digitalRead(10)); dl.setFont(); dl.setCursor(110,13); dl.println("ge"); break; }
    case 5: {  dl.print(flagR); dl.setFont(); dl.setCursor(110,13); dl.println("kr"); break; }
    case 6: {  dl.print(digitalRead(9)); dl.setFont(); dl.setCursor(110,13); dl.println("ig"); break; }
    case 7: {  dl.print(statusEngine); dl.setFont(); dl.setCursor(105,13); dl.println("ste"); break;   }
  }
    dl.display(); 
}

void rDispUpd(){
  DateTime now = myRTC.now();
  dr.clearDisplay();
  if(now.hour() < 10) { dr.setCursor(6,44); dr.println("0"); dr.setCursor(32,44); dr.print(now.hour()); }
    else { dr.setCursor(6,44); dr.print(now.hour()); }
  if(now.minute() < 10) { dr.setCursor(70,44); dr.println("0"); dr.setCursor(96,44); dr.print(now.minute()); }
    else { dr.setCursor(70,44); dr.print(now.minute()); }
  if(clock2dot == 0) { dr.fillRect(62, 19, 4,6,WHITE); dr.fillRect(62, 34, 4,6,WHITE); } 
  dr.display();
    clock2dot = !clock2dot;
}

void initDisplays() {
  dl.begin(SH1106_SWITCHCAPVCC, 0x3C); dl.clearDisplay(); dl.display(); dl.setTextColor(WHITE); dl.setFont(&FreeSans24pt7b); lDispUpd();
  dr.begin(SH1106_SWITCHCAPVCC, 0x3D); dr.clearDisplay(); dr.display(); dr.setTextColor(WHITE); dr.setFont(&FreeSans24pt7b); rDispUpd(); 
  DisplayST=1;
}

void DisplaysOFF() {
  
  dl.clearDisplay(); dl.display(); 
  dr.clearDisplay(); dr.display(); 
  eeprom.eeprom_write(0, odometrPulses);
  DisplayST=0;
}

void settime() {
   //setRTC.setClockMode(false);  // set to 24h
   //setClockMode(true); // set to 12h
   //setRTC.setYear(year);
   //setRTC.setMonth(month);
   //setRTC.setDate(date);
   //setRTC.setDoW(dOW);
   //setRTC.setHour(20);
   //setRTC.setMinute(35);
   //setRTC.setSecond(second);
}

